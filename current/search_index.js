var documenterSearchIndex = {"docs":
[{"location":"roots/#Numerical-Root-Finding","page":"Numerical Root Finding","title":"Numerical Root Finding","text":"","category":"section"},{"location":"roots/","page":"Numerical Root Finding","title":"Numerical Root Finding","text":"CurrentModule = NumericalMethods.Roots","category":"page"},{"location":"roots/","page":"Numerical Root Finding","title":"Numerical Root Finding","text":"Pages = [\"roots.md\"]","category":"page"},{"location":"roots/#Introduction","page":"Numerical Root Finding","title":"Introduction","text":"","category":"section"},{"location":"roots/","page":"Numerical Root Finding","title":"Numerical Root Finding","text":"This module provides functions for finding the roots of univariate functions.","category":"page"},{"location":"roots/#API","page":"Numerical Root Finding","title":"API","text":"","category":"section"},{"location":"roots/","page":"Numerical Root Finding","title":"Numerical Root Finding","text":"Modules = [Roots]\nPrivate = false\nOrder   = [:type, :function]","category":"page"},{"location":"roots/#NumericalMethods.Roots.bisect-Tuple{Function, Real, Real}","page":"Numerical Root Finding","title":"NumericalMethods.Roots.bisect","text":"bisect(f, xlow, xhigh; tol=1.0e-6, maxiter=30, verbose=false, kwargs...)\n\nFind the root of f in the interval [xlow, xhigh] using the bisection method.\n\nSuch a method will not work in multiple dimensions.\n\nArguments\n\nf::Function: The function to find the root of.\nxlow::Real: The lower bound of the interval.\nxhigh::Real: The upper bound of the interval.\ntol::Real=1.0e-6: The tolerance for the root.\nmaxiter::Integer=30: The maximum number of iterations to perform.\nkwargs...: Additional keyword arguments to pass to f.\n\nReturns\n\nxroot::Real: The root of f.\nfxroot::Real: The value of f at the root.\nxlow::Real: The lower bound of the root interval.\nxhigh::Real: The upper bound of the root interval.\nniter::Integer: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"roots/#NumericalMethods.Roots.brent-Tuple{Function, Real, Real}","page":"Numerical Root Finding","title":"NumericalMethods.Roots.brent","text":"brent(f::Function, x_0, x_1; tol=1e-6, max_iter=1000, kwargs...)\n\nUse Brent's method to find the root of a function f.\n\nArguments\n\nf::Function: The function to find the root of.\nx_0::Real: The first guess.\nx_1::Real: The second guess.\nrtol::Real=1e-6: The tolerance for the root.\nftol::Real=1e-6: The tolerance for the function value.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\nkwargs...: Additional keyword arguments to pass to f.\n\nReturns\n\nxroot: The root of f.\nfxroot: The value of f at the root.\niter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"roots/#NumericalMethods.Roots.newton-Tuple{Function, AbstractVector{<:Real}}","page":"Numerical Root Finding","title":"NumericalMethods.Roots.newton","text":"newton(f, x_0; tol=1e-6, max_iter=1000, kwargs...)\n\nUse Newton's method to find the root of a multivariate function f: R^n → R.\n\nArguments\n\nf::Function: The function to find the root of.\nx_0: The first guess.\ntol=1e-6: The tolerance for the root.\nmax_iter=1000: The maximum number of iterations to perform.\nkwargs...: Additional keyword arguments to pass to f.\n\nReturns\n\nxroot: The root of f.\nfxroot: The value of f at the root.\niter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"roots/#NumericalMethods.Roots.newton-Tuple{Function, Real}","page":"Numerical Root Finding","title":"NumericalMethods.Roots.newton","text":"newton(f, x_0; tol=1e-6, max_iter=1000, kwargs...)\n\nUse Newton's method to find the root of a function f: R → R.\n\nArguments\n\nf::Function: The function to find the root of.\nx_0::Real: The first guess.\ntol=1e-6: The tolerance for the root.\nmax_iter=1000: The maximum number of iterations to perform.\nkwargs...: Additional keyword arguments to pass to f.\n\nReturns\n\nxroot: The root of f.\nfxroot: The value of f at the root.\niter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"roots/#NumericalMethods.Roots.secant-Tuple{Function, Real, Real}","page":"Numerical Root Finding","title":"NumericalMethods.Roots.secant","text":"secant(f, x_0, x_1; tol=1e-6, max_iter=1000, kwargs...)\n\nUse the secant method to find the root of a function f.\n\nArguments\n\nf::Function: The function to find the root of.\nx_0::Real: The first guess.\nx_1::Real: The second guess.\ntol::Real=1e-6: The tolerance for the root.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\nkwargs...: Additional keyword arguments to pass to f.\n\nReturns\n\nxroot: The root of f.\nfxroot: The value of f at the root.\niter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"min/#Numerical-Minimisation","page":"Numerical Minimisation","title":"Numerical Minimisation","text":"","category":"section"},{"location":"min/","page":"Numerical Minimisation","title":"Numerical Minimisation","text":"CurrentModule = NumericalMethods.Min","category":"page"},{"location":"min/","page":"Numerical Minimisation","title":"Numerical Minimisation","text":"Pages = [\"min.md\"]","category":"page"},{"location":"min/#Introduction","page":"Numerical Minimisation","title":"Introduction","text":"","category":"section"},{"location":"min/","page":"Numerical Minimisation","title":"Numerical Minimisation","text":"This module provides functions for numerical minimisation of univariate and multivariate functions, R^n to R.","category":"page"},{"location":"min/#API","page":"Numerical Minimisation","title":"API","text":"","category":"section"},{"location":"min/","page":"Numerical Minimisation","title":"Numerical Minimisation","text":"Modules = [Min]\nPrivate = false\nOrder   = [:type, :function]","category":"page"},{"location":"min/#NumericalMethods.Min.brent-Tuple{Function, Real, Real, Real}","page":"Numerical Minimisation","title":"NumericalMethods.Min.brent","text":"This code, drawn from Numerical Recipes, implements Brent's method (without derivative) to minimize the function f.\n\nArguments\n\nf::Function: The function to minimize.\nax::Real: The lower bound of the interval to search.\nbx::Real: The middle bound of the interval to search. Must satisfy f(ax) >   f(bx) and f(cx) > f(bx).\ncx::Real: The upper bound of the interval to search.\natol::Real=1e-6: The absolute tolerance for the minimum.\nrtol::Real=1e-6: The relative tolerance for the minimum.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\n\nReturns\n\nxmin: The minimum argument of f.\nfmin: The value of f at the xmin.\nniter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"min/#NumericalMethods.Min.newton-Tuple{Function, AbstractVector{<:Real}, Any}","page":"Numerical Minimisation","title":"NumericalMethods.Min.newton","text":"newton(f, x_0, δ; atol=1e-6, rtol=1e-6, max_iter=1000)\n\nFind the minima of the function f starting at x_0 using Newton's method and numerical differentiation.\n\nArguments\n\nf::Function: The function to minimize.\nx_0::AbstractVector{<:Real}: The initial guess.\nδ::Real: The step size for the numerical derivative.\natol::Real=1e-6: The absolute tolerance for the minimum.\nrtol::Real=1e-6: The relative tolerance for the minimum.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\n\nReturns\n\nxmin: The minimum argument of f.\nfmin: The value of f at xmin.\nniter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"min/#NumericalMethods.Min.newton-Tuple{Function, AbstractVector{<:Real}}","page":"Numerical Minimisation","title":"NumericalMethods.Min.newton","text":"newton(f, x_0; atol=1e-6, rtol=1e-6, max_iter=1000)\n\nFind the minima of the function f: R^n → R starting at x_0 using Newton's method and automatic differentiation.\n\nArguments\n\nf::Function: The function to minimize.\nx_0::AbstractVector{<:Real}: The initial guess.\natol::Real=1e-6: The absolute tolerance for the minimum.\nrtol::Real=1e-6: The relative tolerance for the minimum.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\n\nReturns\n\nxmin: The minimum argument of f.\nfmin: The value of f at xmin.\nniter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"min/#NumericalMethods.Min.newton-Tuple{Function, Real, Real}","page":"Numerical Minimisation","title":"NumericalMethods.Min.newton","text":"newton(f, x_0, δ; atol=1e-6, rtol=1e-6, max_iter=1000)\n\nFind the minima of the function f starting at x_0 using Newton's method.\n\nArguments\n\nf::Function: The function to minimize.\nx_0::Real: The initial guess.\nδ::Real: The step size for the numerical derivative.\natol::Real=1e-6: The absolute tolerance for the minimum.\nrtol::Real=1e-6: The relative tolerance for the minimum.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\n\nReturns\n\nxmin: The minimum argument of f.\nfmin: The value of f at xmin.\nniter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"min/#NumericalMethods.Min.newton-Tuple{Function, Real}","page":"Numerical Minimisation","title":"NumericalMethods.Min.newton","text":"newton(f, x_0; atol=1e-6, rtol=1e-6, max_iter=1000)\n\nFind the minima of the function f: R → R starting at x_0 using Newton's method and automatic differentiation.\n\nArguments\n\nf::Function: The function to minimize.\nx_0::Real: The initial guess.\natol::Real=1e-6: The absolute tolerance for the minimum.\nrtol::Real=1e-6: The relative tolerance for the minimum.\nmax_iter::Integer=1000: The maximum number of iterations to perform.\n\nReturns\n\nxmin: The minimum argument of f.\nfmin: The value of f at xmin.\nniter: The number of iterations performed.\n\n\n\n\n\n","category":"method"},{"location":"interp/#Numerical-Interpolation","page":"Numerical Interpolation","title":"Numerical Interpolation","text":"","category":"section"},{"location":"interp/","page":"Numerical Interpolation","title":"Numerical Interpolation","text":"CurrentModule = NumericalMethods.Interp","category":"page"},{"location":"interp/","page":"Numerical Interpolation","title":"Numerical Interpolation","text":"Pages = [\"interp.md\"]","category":"page"},{"location":"interp/#Introduction","page":"Numerical Interpolation","title":"Introduction","text":"","category":"section"},{"location":"interp/","page":"Numerical Interpolation","title":"Numerical Interpolation","text":"This module provides functions for interpolation of univariate functions using linear interpolation and cubic splines.","category":"page"},{"location":"interp/#API","page":"Numerical Interpolation","title":"API","text":"","category":"section"},{"location":"interp/","page":"Numerical Interpolation","title":"Numerical Interpolation","text":"Modules = [Interp]\nPrivate = false\nOrder   = [:type, :function]","category":"page"},{"location":"interp/#NumericalMethods.Interp.Linear","page":"Numerical Interpolation","title":"NumericalMethods.Interp.Linear","text":"A callable linear interpolation object.\n\n\n\n\n\n","category":"type"},{"location":"interp/#NumericalMethods.Interp.Linear-Tuple{Any}","page":"Numerical Interpolation","title":"NumericalMethods.Interp.Linear","text":"(f::Linear)(x)\n\nEvaluate the linear interpolation function at x.\n\nArguments\n\nf::Linear: A callable linear interpolation object.\nx::Real: The point at which to evaluate the interpolation function.\n\nReturns\n\ny::Real: The value of the interpolation function at x.\n\n\n\n\n\n","category":"method"},{"location":"interp/#NumericalMethods.Interp.Spline","page":"Numerical Interpolation","title":"NumericalMethods.Interp.Spline","text":"A callable cubic spline interpolation object.\n\n\n\n\n\n","category":"type"},{"location":"interp/#NumericalMethods.Interp.Spline-Tuple{Real}","page":"Numerical Interpolation","title":"NumericalMethods.Interp.Spline","text":"(f::Spline)(x)\n\nEvaluate the cubic interpolation function at x.\n\nArguments\n\nf::Spline: A callable cubic interpolation object.\nx::Real: The point at which to evaluate the interpolation function.\n\nReturns\n\ny::Real: The value of the interpolation function at x.\n\n\n\n\n\n","category":"method"},{"location":"interp/#NumericalMethods.Interp.cubic_interpolation-Tuple{Vector{<:Real}, Vector{<:Real}}","page":"Numerical Interpolation","title":"NumericalMethods.Interp.cubic_interpolation","text":"cubic_interpolation(x, y)\n\nConstruct a cubic interpolation function from the given points.\n\nArguments\n\nx::Vector{<:Real}: The x-coordinates of the points.\ny::Vector{<:Real}: The y-coordinates of the points.\n\nReturns\n\nf::Spline: A callable cubic interpolation object.\n\n\n\n\n\n","category":"method"},{"location":"interp/#NumericalMethods.Interp.linear_interpolation-Tuple{Vector{<:Real}, Vector{<:Real}}","page":"Numerical Interpolation","title":"NumericalMethods.Interp.linear_interpolation","text":"linear_interpolation(x, y)\n\nConstruct a linear interpolation function from the given points.\n\nArguments\n\nx::Vector{<:Real}: The x-coordinates of the points.\ny::Vector{<:Real}: The y-coordinates of the points.\n\nReturns\n\nf::Linear: A callable linear interpolation object.\n\n\n\n\n\n","category":"method"},{"location":"deriv/#Numerical-Differentiation","page":"Numerical Differentiation","title":"Numerical Differentiation","text":"","category":"section"},{"location":"deriv/","page":"Numerical Differentiation","title":"Numerical Differentiation","text":"CurrentModule = NumericalMethods.Deriv","category":"page"},{"location":"deriv/","page":"Numerical Differentiation","title":"Numerical Differentiation","text":"Pages = [\"deriv.md\"]","category":"page"},{"location":"deriv/#Introduction","page":"Numerical Differentiation","title":"Introduction","text":"","category":"section"},{"location":"deriv/","page":"Numerical Differentiation","title":"Numerical Differentiation","text":"This module provides functions for numerical differentiation of univariate and multivariate functions, R^n to R.","category":"page"},{"location":"deriv/#API","page":"Numerical Differentiation","title":"API","text":"","category":"section"},{"location":"deriv/","page":"Numerical Differentiation","title":"Numerical Differentiation","text":"Modules = [Deriv]\nPrivate = false\nOrder   = [:type, :function]","category":"page"},{"location":"deriv/#NumericalMethods.Deriv.differentiate-Tuple{Function, Real}","page":"Numerical Differentiation","title":"NumericalMethods.Deriv.differentiate","text":"differentiate(f::Function, x::Real; δ::Real=1.0e-6, two_side::Bool=true)\n\nCompute the derivative of f at x using a one or two-sided difference quotient.\n\nArguments\n\nf::Function: The function to differentiate.\nx::Real: The point at which to differentiate f.\nδ::Real=1.0e-6: The step size to use in the difference quotient.\ntwo_side::Bool=true: Whether to use a two-sided difference quotient.\n\nReturns\n\nderiv: The derivative of f at x.\n\n\n\n\n\n","category":"method"},{"location":"deriv/#NumericalMethods.Deriv.gradient-Tuple{Function, AbstractVector}","page":"Numerical Differentiation","title":"NumericalMethods.Deriv.gradient","text":"gradient(f::Function, x::AbstractVector; δ::Real=1.0e-6)\n\nCompute the gradient of f at x using a two-sided difference quotient.\n\nArguments\n\nf::Function: The function to differentiate.\nx::AbstractVector: The point at which to differentiate f.\nδ::Real=1.0e-6: The step size to use in the difference quotient.\n\nReturns\n\ngrad::Vector: The gradient of f at x.\n\n\n\n\n\n","category":"method"},{"location":"deriv/#NumericalMethods.Deriv.hessian-Tuple{Function, AbstractVector}","page":"Numerical Differentiation","title":"NumericalMethods.Deriv.hessian","text":"hessian(f::Function, x::AbstractVector; δ::Real=1.0e-6)\n\nCompute the Hessian of f at x using a two-sided difference quotient.\n\nArguments\n\nf::Function: The function to differentiate.\nx::AbstractVector: The point at which to differentiate f.\nδ::Real=1.0e-6: The step size to use in the difference quotient.\n\nReturns\n\nhess::Matrix: The Hessian of f at x.\n\n\n\n\n\n","category":"method"},{"location":"deriv/#NumericalMethods.Deriv.partial-Tuple{Function, AbstractVector, Integer}","page":"Numerical Differentiation","title":"NumericalMethods.Deriv.partial","text":"partial(f::Function, x::AbstractVector, i::Integer; δ::Real=1.0e-6)\n\nCompute the partial derivative of f at x with respect to the ith component of x using a two-sided difference quotient.\n\nArguments\n\nf::Function: The function to differentiate.\nx::AbstractVector: The point at which to differentiate f.\ni::Integer: The index of the component of x with respect to which to   differentiate f.\nδ::Real=1.0e-6: The step size to use in the difference quotient.\n\nReturns\n\nderiv: The partial derivative of f at x with respect to the   ith component of x.\n\n\n\n\n\n","category":"method"},{"location":"deriv/#NumericalMethods.Deriv.twice_differentiate-Tuple{Function, Real}","page":"Numerical Differentiation","title":"NumericalMethods.Deriv.twice_differentiate","text":"twice_differentiate(f::Function, x::Real; δ::Real=1.0e-6)\n\nCompute the second derivative of f at x using a two-sided difference quotient.\n\nArguments\n\nf::Function: The function to differentiate.\nx::Real: The point at which to differentiate f.\nδ::Real=1.0e-6: The step size to use in the difference quotient.\n\nReturns\n\nderiv: The second derivative of f at x.\n\n\n\n\n\n","category":"method"},{"location":"#NumericalMethods.jl-Documentation","page":"NumericalMethods.jl Documentation","title":"NumericalMethods.jl Documentation","text":"","category":"section"},{"location":"","page":"NumericalMethods.jl Documentation","title":"NumericalMethods.jl Documentation","text":"Pages = [\"deriv.md\", \"interp.md\", \"min.md\", \"roots.md\"]\nDepth = 1","category":"page"},{"location":"#Welcome-to-NumericalMethods.jl","page":"NumericalMethods.jl Documentation","title":"Welcome to NumericalMethods.jl","text":"","category":"section"},{"location":"","page":"NumericalMethods.jl Documentation","title":"NumericalMethods.jl Documentation","text":"This package provides methods for numerical programming in Julia. It has functionality for numerical differentiation, interpolation, minimisation and root finding.","category":"page"},{"location":"#Index","page":"NumericalMethods.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"NumericalMethods.jl Documentation","title":"NumericalMethods.jl Documentation","text":"","category":"page"}]
}
